# -*- coding: utf-8 -*-
"""MLFlow_Optuna_Taller3_p2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zizsc8NRCbqK6UUi17kORSZm4PFYHLb2
"""

!pip install optuna
!pip install mlflow
import mlflow
import mlflow.sklearn
import optuna
from sklearn.linear_model import Ridge
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
import pandas as pd
import os
import optuna.visualization as vis  # Esto es para visualizaci√≥n de Optuna
from mlflow.models.signature import infer_signature

data = pd.read_csv('Student_Performance.csv')
encoder = OneHotEncoder(drop='first')
encoder.fit(data[['Extracurricular Activities']])
data[encoder.get_feature_names_out()] = encoder.transform(data[['Extracurricular Activities']]).toarray()
data.drop(['Extracurricular Activities'], axis=1, inplace=True)
'''______________________________'''

scaler = StandardScaler()
X = data.drop('Performance Index', axis=1)
y = data['Performance Index']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)

mlflow.set_experiment("Taller3 p2 Mlflow-Optuna Student Performance")

def objective(trial):
    alpha = trial.suggest_loguniform('alpha', 1e-5, 1e2)

    model = Ridge(alpha=alpha)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = mean_squared_error(y_test, y_pred)**0.5

    run_name = f"Iteration {trial.number + 1}"
    with mlflow.start_run(nested=True, run_name=run_name):
        mlflow.log_param("alpha", alpha)
        mlflow.log_metric("r2", r2)
        mlflow.log_metric("mae", mae)
        mlflow.log_metric("rmse", rmse)

    return r2


study = optuna.create_study(direction='maximize')

with mlflow.start_run(run_name="optuna_studentP_ridge"):
    study.optimize(objective, n_trials=10)

    mlflow.log_params(study.best_params)
    mlflow.log_metric("best_r2", study.best_value)
    best_params = study.best_params
    final_model = Ridge(alpha=best_params['alpha'])
    final_model.fit(X_train, y_train)

    y_pred_final = final_model.predict(X_test)

    final_r2 = r2_score(y_test, y_pred_final)
    final_mae = mean_absolute_error(y_test, y_pred_final)
    final_rmse = mean_squared_error(y_test, y_pred_final)**0.5

    mlflow.log_metric("final_r2", final_r2)
    mlflow.log_metric("final_mae", final_mae)
    mlflow.log_metric("final_rmse", final_rmse)

    input_example = pd.DataFrame(X_train[:1], columns=data.drop('Performance Index', axis=1).columns)
    signature = infer_signature(X_train, final_model.predict(X_train))

    mlflow.sklearn.log_model(
        sk_model=final_model,
        artifact_path="model_student_performance_ridge",
        input_example=input_example,
        signature=signature
    )

    #reemplazo por html
    opt_history_path = "optimization_history.html"
    opt_slice_path = "slice_plot.html"

    vis.plot_optimization_history(study).write_html(opt_history_path)
    vis.plot_slice(study).write_html(opt_slice_path)

    mlflow.log_artifact(opt_history_path)
    mlflow.log_artifact(opt_slice_path)

    os.system(f"rm *.html")

print("Best params:")
print(study.best_params)